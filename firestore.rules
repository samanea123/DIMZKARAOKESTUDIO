/**
 * @fileoverview Firestore Security Rules for the Karaoke System.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for song queue items,
 * while allowing public read access to the list of songs. User profiles are private.
 *
 * Data Structure:
 * - /songs/{songId}: Public collection of song metadata.
 * - /users/{userId}: User profile data, accessible only to the user.
 * - /users/{userId}/songQueueItems/{songQueueItemId}: Song queue items owned by the user.
 *
 * Key Security Decisions:
 * - Users can only create, modify, or delete their own song queue items.
 * - User listing is disallowed.
 * - Song data is publicly readable, but only administrators (not implemented) could modify them.
 *
 * Denormalization for Authorization:
 * The `songQueueItems` subcollection enforces path-based ownership, ensuring that each
 * item's parent path implicitly defines the owner. This avoids the need for `get()` calls
 * to verify ownership.
 *
 * Structural Segregation:
 * User-specific song queue items are stored in a private subcollection under each user's
 * document, providing a natural segregation of data and simplifying security rules.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows public read access to song metadata.
     * @path /songs/{songId}
     * @allow (get, list)
     * @deny (create, update, delete)
     * @principle Public read access for songs, owner-only writes (not yet implemented).
     */
    match /songs/{songId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add admin-only writes
    }

    /**
     * @description Manages user profile data, accessible only to the user.
     * @path /users/{userId}
     * @allow (create) The user can create their own profile (self-registration).
     * @allow (get, update, delete) Only the user can get, update, or delete their profile.
     * @deny (list) User listing is not allowed.
     * @deny Attempts to create a user profile with an ID that doesn't match the authenticated user's ID.
     * @principle Enforces document ownership for user profiles, preventing unauthorized access.
     */
    match /users/{userId} {
      allow create: if isSignedIn() && isOwner(userId);
      allow get, update, delete: if isSignedIn() && isExistingOwner(userId);
      allow list: if false;
    }

    /**
     * @description Manages song queue items for each user, enforcing path-based ownership.
     * @path /users/{userId}/songQueueItems/{songQueueItemId}
     * @allow (create) The user can add songs to their own queue.
     * @allow (get, list, update, delete) Only the user can manage their own song queue.
     * @deny Attempts to create a queue item for a different user.
     * @principle Enforces path-based ownership for song queue items.
     */
    match /users/{userId}/songQueueItems/{songQueueItemId} {
      allow create: if isSignedIn() && isOwner(userId);
      allow get, list, update, delete: if isSignedIn() && isExistingOwner(userId);
    }

    // --- Helper Functions ---

    /**
     * @description Checks if the user is signed in.
     * @return {boolean} True if the user is authenticated, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user ID matches the provided user ID.
     * @param {string} userId The user ID to compare against the authenticated user ID.
     * @return {boolean} True if the user IDs match, false otherwise.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user is the owner and the resource exists.
     * @param {string} userId The user ID to compare against the authenticated user ID.
     * @return {boolean} True if the user IDs match and the resource exists, false otherwise.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }
  }
}
/**
 * @fileoverview Firestore Security Rules for the Karaoke System.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for song queue items,
 * allowing users to manage their own queues. Public read access is granted to
 * the 'songs' collection.
 *
 * Data Structure:
 * - /songs/{songId}: Stores publicly available song metadata.
 * - /users/{userId}: Stores user profile information.
 * - /users/{userId}/songQueueItems/{songQueueItemId}: Stores individual song queue
 *   items, with strict ownership enforced based on the userId in the path.
 *
 * Key Security Decisions:
 * - Users can only manage their own song queue items.
 * - Public read access to song metadata is permitted.
 * - User listing is implicitly denied as there is no rule allowing it.
 *
 * Denormalization for Authorization:
 * The 'songQueueItems' subcollection uses path-based ownership, where the
 * {userId} in the path directly corresponds to the owner of the song queue
 * item. This eliminates the need for additional reads to verify ownership.
 * Structural Segregation:
 * Public 'songs' are separated from private 'songQueueItems' to allow for
 * public read access to song metadata while maintaining strict ownership
 * controls over user-specific data.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows public read access to song metadata. Only the owner can create, update, or delete.
     * @path /songs/{songId}
     * @allow (get, list)
     * @allow (create) Example: Request with request.auth.uid and request.resource.data.authorId matching the user ID.
     * @allow (update, delete) Example: Request made by the user whose ID matches resource.data.authorId.
     * @deny (create) Example: Request with request.resource.data.authorId not matching request.auth.uid.
     * @deny (update, delete) Example: Request made by a user whose ID does not match resource.data.authorId.
     * @principle Public read, owner-only writes.
     */
    match /songs/{songId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Manages user profile information. Allows a user to create their own profile.
     * @path /users/{userId}
     * @allow (create) Example: Request from user 'testUser' to create /users/testUser document.
     * @deny (create) Example: Request from user 'testUser' to create /users/anotherUser document.
     * @allow (get, list, update, delete) Example: Request from user 'testUser' to get, list, update or delete /users/testUser document.
     * @deny (get, list, update, delete) Example: Request from user 'testUser' to get, list, update or delete /users/anotherUser document.
     * @principle Enforces document ownership for user profiles.
     */
    match /users/{userId} {
      allow get, list: if false;
      allow create: if isOwner(userId);
      allow update, delete: if isExistingOwner(userId);
    }

    /**
     * @description Manages song queue items for each user. Only the owner (user) can manage their own queue items.
     * @path /users/{userId}/songQueueItems/{songQueueItemId}
     * @allow (create) Example: Request from user 'testUser' to create /users/testUser/songQueueItems/item1.
     * @deny (create) Example: Request from user 'testUser' to create /users/anotherUser/songQueueItems/item1.
     * @allow (get, list, update, delete) Example: Request from user 'testUser' to get, list, update or delete /users/testUser/songQueueItems/item1.
     * @deny (get, list, update, delete) Example: Request from user 'testUser' to get, list, update or delete /users/anotherUser/songQueueItems/item1.
     * @principle Enforces document ownership for song queue items.
     */
    match /users/{userId}/songQueueItems/{songQueueItemId} {
      allow get, list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update, delete: if isExistingOwner(userId);
    }
  }

  // --- Helper functions ---

  /**
   * @description Checks if the request is authenticated.
   * @return {bool} True if the request is authenticated; otherwise, false.
   */
  function isSignedIn() {
    return request.auth != null;
  }

  /**
   * @description Checks if the user ID matches the authenticated user's ID.
   * @param {string} userId The user ID to compare against the authenticated user's ID.
   * @return {bool} True if the user ID matches the authenticated user's ID; otherwise, false.
   */
  function isOwner(userId) {
    return isSignedIn() && request.auth.uid == userId;
  }

   /**
   * @description Checks if the user ID matches the authenticated user's ID and that resource exists.
   * @param {string} userId The user ID to compare against the authenticated user's ID.
   * @return {bool} True if the user ID matches the authenticated user's ID and resource exists; otherwise, false.
   */
  function isExistingOwner(userId) {
    return isOwner(userId) && resource != null;
  }
}
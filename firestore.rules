/**
 * @fileoverview Firestore Security Rules for the Karaoke System.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for song queue items,
 * allowing users to manage their own queues. Public read access is granted to the songs collection.
 *
 * Data Structure:
 * - /songs/{songId}: Public collection for song metadata.
 * - /users/{userId}: Stores user profiles, only accessible by the user themselves.
 * - /users/{userId}/songQueueItems/{songQueueItemId}: Subcollection of users,
 *   containing their song queue items. Only accessible by the owning user.
 *
 * Key Security Decisions:
 * - Users can only manage their own song queue items.
 * - Song metadata is publicly readable.
 * - User listing is not allowed.
 *
 * Denormalization for Authorization:
 * The userId is present in the path `/users/{userId}/songQueueItems/{songQueueItemId}`
 * This prevents the need for additional reads to check ownership.
 *
 * Structural Segregation:
 * User-specific data (songQueueItems) is stored in a subcollection under each user,
 * ensuring private data and simplifying access control.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows public read access to song metadata. Only the owner can modify song documents.
     * @path /songs/{songId}
     * @allow (get, list): Public access to read song metadata.
     * @allow (create, update, delete): No direct create, update or delete for this collection in this version.
     * @deny (create, update, delete): All writes are denied.
     * @principle Public read access for song data, owner-only writes (not yet implemented).
     */
    match /songs/{songId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Restricts access to user profiles. Only the user themselves can read or write their profile.
     * @path /users/{userId}
     * @allow (get): User can read their own profile.
     * @allow (create): User can create their own profile if the userId matches their auth UID.
     * @allow (update): User can update their own profile if the userId matches their auth UID.
     * @allow (delete): User can delete their own profile if the userId matches their auth UID.
     * @allow (list): Listing users is not allowed.
     * @deny (get): User cannot read other user profiles.
     * @deny (create): User cannot create a profile with a mismatched userId.
     * @deny (update): User cannot update other user profiles or change their own userId.
     * @deny (delete): User cannot delete other user profiles.
     * @principle Enforces document ownership for user profiles.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Manages song queue items for each user. Only the user can manage their own queue items.
     * @path /users/{userId}/songQueueItems/{songQueueItemId}
     * @allow (get): User can read their own song queue items.
     * @allow (create): User can add songs to their own queue.
     * @allow (update): User can update songs in their own queue.
     * @allow (delete): User can delete songs from their own queue.
     * @allow (list): User can list songs in their own queue.
     * @deny (get): User cannot read other user's queue items.
     * @deny (create): User cannot add songs to other user's queues.
     * @deny (update): User cannot update songs in other user's queues.
     * @deny (delete): User cannot delete songs from other user's queues.
     * @principle Enforces document ownership for song queue items.
     */
    match /users/{userId}/songQueueItems/{songQueueItemId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isOwner(userId) && resource != null;
      allow delete: if isOwner(userId) && resource != null;
    }
  }

  // Helper functions
  function isSignedIn() {
    return request.auth != null;
  }

  function isOwner(userId) {
    return isSignedIn() && request.auth.uid == userId;
  }
}
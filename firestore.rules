/**
 * @fileoverview Firestore Security Rules for the Karaoke System.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for song queue items,
 * allowing users to manage their own queues while providing public read access
 * to song metadata. It leverages path-based authorization and data
 * denormalization to minimize reads and maximize security.
 *
 * Data Structure:
 * - /songs/{songId}: Stores public song metadata.
 * - /users/{userId}: Stores user profile information.
 * - /users/{userId}/songQueueItems/{songQueueItemId}: Stores user-specific song queue items.
 *
 * Key Security Decisions:
 * - Public read access to song metadata is allowed.
 * - Users can only manage their own song queue items.
 * - Listing song queue items is restricted to the owner.
 * - Data validation is limited to authorization-critical fields for prototyping.
 *
 * Denormalization for Authorization:
 * - SongQueueItems are stored in user-specific subcollections (`/users/{userId}/songQueueItems/{songQueueItemId}`),
 *   eliminating the need for `get()` calls to verify ownership. The `userId` is implicit in the path.
 *
 * Structural Segregation:
 * - User-specific song queue items are stored in a private subcollection
 *   (`/users/{userId}/songQueueItems/{songQueueItemId}`), enabling secure `list` operations.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows public read access to song metadata. Only the owner can create, update, or delete songs.
     * @path /songs/{songId}
     * @allow get, list: if true;
     * @deny create, update, delete: if false; // TODO: Add owner validation if writes are allowed.
     * @principle Allows public read access to songs.
     */
    match /songs/{songId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add owner validation if writes are allowed.
    }

    /**
     * @description Allows a user to read and write their own user profile.
     * @path /users/{userId}
     * @allow get: if isSignedIn() && isOwner(userId);
     * @allow list: if false;
     * @allow create: if isSignedIn() && isOwner(userId);
     * @allow update: if isSignedIn() && isOwner(userId);
     * @allow delete: if false; // User deletion is not allowed.
     * @deny get: if !isSignedIn() || !isOwner(userId);
     * @deny create: if !isSignedIn() || !isOwner(userId);
     * @deny update: if !isSignedIn() || !isOwner(userId);
     * @principle Enforces document ownership for user profiles.
     */
    match /users/{userId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if false; // User deletion is not allowed.
    }

    /**
     * @description Allows a user to manage their own song queue items.
     * @path /users/{userId}/songQueueItems/{songQueueItemId}
     * @allow get: if isSignedIn() && isOwner(userId);
     * @allow list: if isSignedIn() && isOwner(userId);
     * @allow create: if isSignedIn() && isOwner(userId);
     * @allow update: if isSignedIn() && isExistingOwner(userId);
     * @allow delete: if isSignedIn() && isExistingOwner(userId);
     * @deny create: if !isSignedIn() || !isOwner(userId);
     * @deny update: if !isSignedIn() || !isExistingOwner(userId);
     * @deny delete: if !isSignedIn() || !isExistingOwner(userId);
     * @principle Enforces document ownership for song queue items.
     */
    match /users/{userId}/songQueueItems/{songQueueItemId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isExistingOwner(userId) {
      return isSignedIn() && isOwner(userId) && resource != null;
    }
  }
}
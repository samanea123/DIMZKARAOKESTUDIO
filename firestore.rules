/**
 * @fileoverview Firestore Security Rules for the karaoke application.
 *
 * Core Philosophy:
 * This ruleset enforces a user-ownership model for song queue items,
 * allowing users to manage their own queues. Song data is publicly readable,
 * but only the application can modify it. User profiles are also owner-only.
 *
 * Data Structure:
 * - /songs/{songId}: Public collection of song metadata.
 * - /users/{userId}: Stores user profiles.
 * - /users/{userId}/songQueueItems/{songQueueItemId}: User-specific song queues.
 *
 * Key Security Decisions:
 * - Public read access to song metadata for easy discoverability.
 * - Strict user ownership of song queue items, enforced via path-based rules.
 * - User profiles are private and only accessible to the owning user.
 * - No user listing is allowed.
 *
 * Denormalization for Authorization:
 * - Path-based ownership in /users/{userId}/songQueueItems/{songQueueItemId}
 *   removes the need for get() calls to verify ownership.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows anyone to read song metadata, but restricts modifications.
     * @path /songs/{songId}
     * @allow (get, list): if true
     * @deny (create, update, delete): if false
     * @principle Public read, application-only writes for song data.
     */
    match /songs/{songId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Manages user profiles. Only the authenticated user can read and write their own profile.
     * @path /users/{userId}
     * @allow (create): if isSignedIn() && isOwner(userId);
     * @allow (get, update, delete): if isOwner(userId);
     * @deny (list): if false;
     * @deny (create): if !isSignedIn() || !isOwner(userId);
     * @principle Enforces document ownership for user profiles.
     */
    match /users/{userId} {
      allow get, update, delete: if isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Manages song queue items for each user. Only the owner (user from the path) can manage the queue.
     * @path /users/{userId}/songQueueItems/{songQueueItemId}
     * @allow (create, get, list, update, delete): if isOwner(userId)
     * @deny (create, get, list, update, delete): if !isOwner(userId)
     * @principle Path-based ownership ensures only the owning user can manage their queue.
     */
    match /users/{userId}/songQueueItems/{songQueueItemId} {
      allow get, list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isOwner(userId) && resource != null;
      allow delete: if isOwner(userId) && resource != null;
    }

    // --- Helper Functions ---

    /**
     * @description Checks if the request is authenticated.
     * @return {bool} True if the request is authenticated, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user ID matches the provided user ID.
     * @param {string} userId The user ID to compare against.
     * @return {bool} True if the user ID matches, false otherwise.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }
  }
}